---
title: "Collaborating with Git"
author: "Jock Currie, Natasha Besseling"
date: last-modified
date-format: "D MMMM YYYY"
format: 
  html:
    toc: true
    toc-depth: 2
    number-sections: true
    fig-cap-location: bottom
    fig-numbering: true
number-depth: 2
bibliography: link2zotero.bib
execute:
  echo: true
  warning: false
  error: false
---

# Version control

Once we have our data and file structures organised in a clear, consistent and logical way, we need to try and write well-structured, well-documented and easy-to-follow code for effective collaboration. 
An important aspect of effective collaboration is version control, which enables us to explicitly track updates to the project, snapshot specific versions (e.g. of results shared in an output), and remain organised among multiple collaborators working on the same project.

## What is Git?

A solution to **track** and **document** changes to files (inputs, outputs, results, document versions, etc). It allows you to take a snapshot of your project contents at a point in time and save it with a meaningful commit message, so that you can roll back to that previous state (or recover individual files from that state) at any future time.

Git will track changes in any file formats, including Word documents, spatial files, etc. 
However, the very useful [*git diff*](https://www.datacamp.com/tutorial/git-diff-guide) function, which highlights differences in the **content** between file versions, works only for selected (mostly text) file types.

Before you start using Git for the first time, you need to set your credentials either within a terminal:\

> git config \--global user.name \[YOUR NAME\]\
> git config \--global user.email \[YOUR EMAIL\]

Alternatively, in R, you can use the *usethis* package as follows:

> library(usethis)
> use_git_config(user.name = "Jane Doe", user.email = "jane@example.org")

See some [GitHub information](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address) on the commit email address, which you may want to read if you're worried about exposing your email address online.

### Initialise Git

Once your Git profile is created, you can initialise (activate) Git on any project (folder).
This action is needed only once for each project and if you clone a remote repository, you bypass this step as the cloned repository is already initialised.

In RStudio, it can be achieved via *Tools* \> *Project Options* \> *Git/SVN*; select *Git* under *Version control system*.

Alternatively, simply type [*git init*]{.mark} in a terminal, ensuring you're in the project root folder.

The .git folder appears inside your project folder once you have initialised Git on that project and it contains the (magic) history that tracks your committed versions over time.

## What is GitLab/GitHub?

An online platform that allows you to share your project with the public, or selected collaborators, and your collaborators are able to make changes that you can then 'accept' (merge) into your project. The updated versions or changes to the project are 'pushed' (from computer to online repository) and 'pulled' (from online repository to computer) with Git commands.

If you would like to version control your work on your own computer (and nothing further), then you need only the Git software installed. If you would like to create an online repository (copy of your project), to interact with collaborators on the work or simply make  your work publicly accessible, then you will additionally need to create a profile on GitLab or GitHub (or equivalent) and 'push' your project to an online repository.

We will only scratch the surface of the most common Git operations.
An excellent resource for finding your feet with Git and using it with R is Jenny Bryan's [Happy Git and GitHub for the useR](https://happygitwithr.com/) and [here](https://valohai.com/blog/git-for-data-science/) is another valuable introduction.

## Connecting to GitHub/GitLab

Making the secure connection between RStudio (or Git) on your computer and your GitHub or GitLab profile can sometimes be a frustrating exercise. 
There are [multiple ways of going about it](https://happygitwithr.com/connect-intro), please read the relevant instructions for GitHub or GitLab.
I have avoided trying to use SSH, mainly because I remember a staff member of mine struggling to SSH to a cluster computer from the SANBI network a few years ago (due to SANBI network restrictions). 
If anyone is using a SSH connection with GitHub/GitLab from SANBI's network, please shout to correct my untested aversion!

### GitHub authentication: {#sec-githubAuth}

Go to https://github.com/settings/tokens and click “Generate token” to generate your personal access token (PAT).
Recommendation is to select *repo*, *user*, and *workflow* before confirming *Generate token*.

Ensure you safely store your PAT; this is your password for Git to communicate with GitHub!

Install the R package gitcreds and then pass your PAT to it to enable Git to pull and push changes from and to GitHub:

> gitcreds::gitcreds_set()

**Note:** If any Git operations require a password to access GitHub, enter the PAT, not your GitHub profile password. 

### GitLab authentication

You can create [access tokens](https://gitlab.com/-/user_settings/personal_access_tokens) very similarly to GitHub (see @sec-githubAuth).

Unlike GitHub, GitLab allows you to use your GitLab profile username and password to authenticate.
However, if you have enabled Two-Factor Authentication, then you must use a PAT as your password when prompted for Git operations.

## Common Git functions

A general recommendation is to use cheat sheets when you're learning a new tool, e.g. [Git cheat sheet](https://about.gitlab.com/images/press/git-cheat-sheet.pdf).

RStudio has integrated Git functionality and a Git interface on RStudio becomes visible once you have initialised Git version control on that project (close and reopen RStudio if it doesn't appear). The Git interface on RStudio provides buttons for the most common Git operations, which can alternatively be executed in a terminal. Sometimes you need to execute a command that is not covered by the buttons, so it is a good idea to become familiar with using the terminal (and many advanced users revert to using the terminal only).

### Cloning remote repositories

Very often the first thing you might want to do, is to clone an online repository from platforms such as GitHub or GitLab.
To do so, navigate to the online repository website and copy the relevant URL from the *Code* drop-down.
In RStudio, create the new cloned project via *File > New Project > Version Control > Git* and pasting the URL into the relevant space, checking that you're happy with the project directory name and location, before confirming *Create Project*.


> git clone https://github.com/jockongit/git_tutorial.git

This approach of cloning online repositories is how most of us novice Git users start a new project:
We create a new empty project on GitHub/GitLab, clone it to our computers, and then start updating the *README.md* and create the project folders, files and update the .gitignore file(s).
Once the basic parts are in place, we can do our first cycle of staging the changes, committing them to a version and pushing them to the remote repository.

You can [push an existing project to GitHub/GitLab](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/How-to-push-an-existing-project-to-GitHub), however I've struggled to achieve this in the past. 
A way to circumvent it is to do the above clone and then copy and paste your project contents into the newly cloned (but mostly empty) project folder.

A second alternative, to push an existing project on your computer to GitHub, is to type [*usethis::use_github()*]{.mark} in your R console (having installed the *usethis* package). 
Before doing so, you need to ensure that your R project has Git initialised.
This should create a new GitHub repo named the same as your project and push your files to it.
Remember to set up your .gitignore appropriately before pushing your project.

### Pulling updates

To pull the latest version from the online repository (referred to as 'remote'), use the *Pull* button on the Git pane in RStudio.

This is equivalent to typing the following in a terminal:

> git pull

If you are collaborating with others on a project, it becomes vital to pull changes **before** you start making changes, so that you're working with the latest additions from your team mates!

### Git status

The Git pane in RStudio provides an easy overview of what the status is of your project, showing up files that have changed but are not yet committed.
It also indicates whether they have changed, have been deleted, are newly created, etc.
Similar (and more detailed information) can be viewed in a terminal with the command:

> git status

### Staging changes

Selecting the changed files that you want to commit, is referred to as *staging* them.
The files that have not changed do not need to be staged (nor committed), but will be part of the commit version.

In RStudio, you stage the files by ticking their boxes in the *Staged* column of the Git pane.   

In the terminal, you stage all modified files with:  

> git add -A

or if you want to add specific files, name them:

> git add filename1.ext filename2.ext filename3.ext

### Git commit

To 'save' or take a snapshot of your project folder with the staged file changes (and everything else not in *.gitignore*), you need to make a commit.
You can stage and commit only certain (changed) files, while leaving other changed files unstaged and uncommited (leaving them in the previous committed version state).

To commit in RStudio, select the *Commit* button in the Git pane, with files selected for staging, add a commit message in the *Commit message* box and click *Commit*.

Alternatively, the terminal syntax is as follows:

> git commit -m "Your commit message describing what has changed."

or, if you would like to stage and commit your files in one step, you can use:

> git commit -a -m "Your commit message describing what has changed."

Try to write meaningful commit messages, both to help your collaborators understand the changes and in case you need to identify a specific commit in a few days, months (or years) time.

### Pushing changes

After you have committed changes, those can be pushed to the remote repository by clicking the *Push* button on the Git pane in RStudio.

Alternatively, the terminal command is:

> git push

If one of your teammates has pushed their changes to the online repository since your previous pull, you may get a 'rejected' error message, stating "Updates were rejected because the remote contains work that you do not have locally".

In most instances, this can be easily resolved with a 'Pull with Rebase' (see the drop-down arrow next to the *Pull* button in RStudio or type [git pull \--rebase]{.mark} into a terminal).

If your teammates pushed changes to the same region or chunk of a file that you changed, you will encounter a **merge conflict**.
If informed of a merge conflict, open the conflicting file(s), find the conflicting text sections and decide which versions of the text to keep. 
Then restage and commit your resolved file(s) and they should push without problem.
Here is some example output from such a situation and the workflow to resolve it:

Natasha pushes new changes to the online repository and receives the 'failed to push' message because someone else has pushed an update since she last pulled:

> git push\
> To https://gitlab.com/nba_2025/git_tutorial.git\
>  ! [rejected]        main -> main (fetch first)\
> error: failed to push some refs to 'https://gitlab.com/nba_2025/git_tutorial.git'\
> hint: Updates were rejected because the remote contains work that you do not\
> hint: have locally. This is usually caused by another repository pushing to\
> hint: the same ref. If you want to integrate the remote changes, use\
> hint: 'git pull' before pushing again.\
> hint: See the 'Note about fast-forwards' in 'git push --help' for details.\

Therefore, she pulls and Git does an auto-merge of the two diverging versions, but warns her that she needs to sort out a merge conflict:

> git pull\
> remote: Enumerating objects: 36, done.\
> remote: Counting objects: 100% (36/36), done.\
> remote: Compressing objects: 100% (22/22), done.\
> remote: Total 22 (delta 16), reused 0 (delta 0), pack-reused 0 (from 0)\
> Unpacking objects: 100% (22/22), 2.68 KiB | 49.00 KiB/s, done.\
> From https://gitlab.com/nba_2025/git_tutorial\
>    5e29823..638bf52  main       -> origin/main\
> Auto-merging quarto/collaborating_with_git.qmd\
> CONFLICT (content): Merge conflict in quarto/collaborating_with_git.qmd\
> Automatic merge failed; fix conflicts and then commit the result.\

The merge conflict results in both versions of the differing text, highlighted in this manner:

> <<<<<<< HEAD: collaborating_with_git.qmd\
> This version of the conflicting text contains changes from the most recent local changes.\
> =======\
> This version of the conflicting text contains changes pulled from your teammate.\
> >>>>>>> 77976da35a11db4580b80ae27e8d65caf5208086:collaborating_with_git.qmd

Natasha manually sorts out the merge conflicts and deletes the parts she doesn't want to keep (including the special code outlining the conflict), she then saves the file, stages it, commits and pushes her resolved file:

> git commit -a -m "fixed merge conflict"\
> [main add7213] fixed merge conflicts\

> git push\
> Enumerating objects: 14, done.\
> Counting objects: 100% (14/14), done.\
> Delta compression using up to 22 threads\
> Compressing objects: 100% (8/8), done.\
> Writing objects: 100% (8/8), 936 bytes | 936.00 KiB/s, done.\
> Total 8 (delta 6), reused 0 (delta 0), pack-reused 0 (from 0)\
> To https://gitlab.com/nba_2025/git_tutorial.git\
>    638bf52..add7213  main -> main\

### git diff

Highlighting the differences between two versions of the same file can be very useful when trouble-shooting a merge conflict or trying to remind yourself of what changes you've made (if any).
The *Diff* button on RStudio's Git pane does that for you and by default only changed files that have not yet been committed are visible to select.
Similar can be achieved from the command line with 

> git diff

to scroll through all the changes for each file, or to examine a specific file, by adding its name:

> git diff filename.ext

### Git log

Want to see the history of Git commits (and branches) on your project? In RStudio, you can click on the *History* button in the Git pane (not the *History* pane of your project!), which shows you the sequence of previous commits and provides a visual representation of branches.

That information is taken from the Git log, which can be accessed on the terminal with:

> git log

### The most common Git tasks

Although there are many more Git commands (and most have several options via additional arguments), by far the most common sequence of tasks tends to be:

 * **git pull** to ensure we have the newest version; 
 * **git add .** to stage changed files, followed by 
 * **git commit -m "descriptive commit message"** to commit the changes; 
 * **git push** to push them to the remote repository;
 * **git pull \--rebase** if the push was rejected due to the remote containing updated work, followed by another **git push** (in some cases requiring resolution of a merge conflict first);

If you are facing problems getting Git and GitHub/GitLab to work with RStudio, try to read [Happy Git and GitHub for the useR](https://happygitwithr.com/troubleshooting) or other online resources.

Lastly, remember to never create a Git repository inside another Git repository.

## The importance of *.gitignore*

The *.gitignore* file is a text file that lists which files (or directories) should not be tracked by Git. In other words, those files/directories listed will not appear at all in the Git repository and any changes to them will not be tracked.

This is useful for many different contexts, e.g.:

-   sensitive input or output files you do not want shared with those accessing your project;\
-   your secret credentials saved in the *.Renviron* file (see @sec-renviron);\
-   large files that will cause you to exceed file size or repository size limits;
-   temporary files or other files that change frequently but have no bearing on project contents;

## The *.Renviron* file {#sec-renviron}

Any login credentials (e.g. username and password to access your databases) or other sensitive information that you want accessible to your R session, but which you do not want to share with collaborators (or the public if your project is public), you should add to a special file named *.Renviron*. This text file is treated in a special way, in that objects defined in it are automatically loaded into your R environment when you open your project in RStudio. If you want the same credentials accessible across all your R projects, you can save such information in an *.Renviron* file in your *HOME* directory. If you want different credentials accessible to different projects, you can instead create a project-specific *.Renviron* file in your project root directory. Remember, if you make changes in your .Renviron file, you need to restart R to load those changes.

**Very important:** Make a habit of adding '.Renviron' to your *.gitignore* file, so that the sensitive information you have put there is not pushed to your online repository!

# The importance of branches

Once a project has become mature (contains a substantial amount of work and is worth protecting), it becomes important that further development moves to separate 'feature' branches and collaborators avoid making changes directly to the main branch. 
A branch represents a complete working copy of the project and anything changed on a feature branch has no bearing on the main branch, until it is explicitly merged into the main branch, transferring its updates into the main branch.
The developer of the feature branch opens a 'merge request' on GitLab/GitHub, once their changes have been tested and reviewed (make sure they don't break anything!).
The owner(s) of the project are responsible for reviewing the changes and deciding whether they approve the merge or not.
Typically (and by default settings), a feature branch is deleted once it has been merged into a main branch, as that updated work has moved into the main branch.

In RStudio, a branch is easily created by clicking the *New Branch* button in the Git pain. 
Give it a concise but descriptive name. 
The same can be achieved in the terminal with:

> git checkout -b add_threat_plot

which is the single-step equivalent of:

> git branch add_threat_plot
> git checkout add_threat_plot

Once you start collaborating on projects, it becomes especially important to pull and push frequently. 
Before you start working on a new feature, pull the remote project, in case your teammates have made some changes since you last worked on it. 
Otherwise, you'll be adding your changes to an outdated version!

**Warning:** Always double-check which branch you're working on before making your changes. 
If you forget to, there are ways of [moving your changes to another branch](https://stackoverflow.com/questions/1394797/move-existing-uncommitted-work-to-a-new-branch-in-git).

[Creating issues (on GitLab/GitHub) and then closing those issues with a commit](https://raps-with-r.dev/github.html), is a really nice way of documenting updates.
Issues are used to document problems in the project code, or wishlist features to add in future. 
When those problems or wishlist items are addressed, the commit message can simply reference the issue number (e.g. ["fixed #28]{.mark}), which will automatically close that issue number. 

# Things to watch out for

Always review and be certain about what is included or not included in *.gitignore*. We need to be careful to not share (push) sensitive data or credentials - e.g. it would be a horrible mistake to push your collaborator's highly sensitive data to a public Git repository!

Large file size limits and overall repository size limits need to be taken into consideration. For example, if you create (or include) a file \> 100 MB in your project, you'll be able to commit it on Git on your local machine, but when you try to push that commit to GitLab, it will be rejected (and can get complicated quickly).

Some spatial files and Git pose a unique problem: When we open (look at) a geopackage file with QGIS (is it the same for Arc?), the file is immediately updated in terms of its 'date modified' and Git considers it changed!
This can cause a lot of unnecessary 'changed files' (the file contents isn't actually changed) that get flagged for commits.
More dangerous, it could conceivably cause someone's real changes to that file to be over-written by a collaborator's copy who subsequently opened their file to view, but made no content changes.
There appear to be work-arounds for it, but it requires consideration if your teammates are accessing the project files with QGIS.

# References

Borer ET, Seabloom EW, Jones MB, Schildhauer M (2009) Some Simple Guidelines for Effective Data Management. The Bulletin of the Ecological Society of America 90:205–214. doi: 10.1890/0012-9623-90.2.205

Bryan J. [Happy Git and GitHub for the useR.](https://happygitwithr.com/) 

